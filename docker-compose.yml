services:
  productservice:
    container_name: productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    ports:
      - "5001:8080"
    env_file:
      - ProductService/.env
    depends_on:
      product_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://productservice:5001/health || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    networks:
      - micro_net
  
  orderservice:
    container_name: orderservice
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    ports:
      - "5002:8080"
    env_file:
      - OrderService/.env
    depends_on:
      order_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
       - micro_net
  
  userservice:
    container_name: userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    ports:
      - "5003:8080"
    env_file:
      - UserService/.env
    depends_on:
      user_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - micro_net

  inventoryservice:
    container_name: inventoryservice
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    ports:
      - "5004:8080"
    env_file:
      - InventoryService/.env
    depends_on:
      inventory_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - micro_net

  order_db:
    image: postgres:15
    container_name: order_db
    restart: always
    env_file:
      - OrderService/.env
    ports:
      - "5441:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
      - ./db/order:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d order_service_db || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - micro_net

  product_db:
    image: postgres:15
    container_name: product_db
    restart: always
    env_file:
      - ProductService/.env
    # environment:
    #   POSTGRES_USER: postgres
    #   POSTGRES_PASSWORD: Tienphat123
    #   POSTGRES_DB: demo_micro
    ports:
      - "5440:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
      - ./db/product:/docker-entrypoint-initdb.d
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d demo_micro || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
    networks:
      - micro_net

  user_db:
    image: postgres:15
    container_name: user_db
    restart: always
    env_file:
      - UserService/.env
    ports:
      - "5402:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./db/user:/docker-entrypoint-initdb.d
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d user_service_db || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
    networks:
      - micro_net

  inventory_db:
    image: postgres:15
    container_name: inventory_db
    restart: always
    env_file:
      - InventoryService/.env
    ports:
      - "5403:5432"
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
      - ./db/inventory:/docker-entrypoint-initdb.d
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres -d inventory_service_db || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
    networks:
      - micro_net

  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "5000:8080"
    env_file:
      - ApiGateway/.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    # environment:
    #   GrpcEndpoints__ProductService: http://productservice:5001
    depends_on:
      - productservice
      - orderservice
      - userservice
      - inventoryservice
    networks:
      - micro_net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" #Cổng chính để ứng dụng ASP.NET Core kết nối
      - "15672:15672"  #Cổng giao diện quản lý (RabbitMQ Management UI)
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq  # Lưu dữ liệu persist (queue, exchange, etc.)
    networks:
      - micro_net

volumes:
  product_db_data:
  order_db_data:
  rabbitmq_data:
  user_db_data:
  inventory_db_data:
    
networks:
  micro_net:
    driver: bridge